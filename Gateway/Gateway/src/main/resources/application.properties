
server.port=8084
spring.application.name=Gateway

#eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true




spring.cloud.gateway.routes[0].id=user
#spring.cloud.gateway.routes[0].uri=http://localhost:8081
spring.cloud.gateway.routes[0].uri=lb://USER
spring.cloud.gateway.routes[0].predicates[0]=Path=/user/**
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=userServiceCircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.fallbackuri=forward:/userFallBack






spring.cloud.gateway.routes[1].id=book
#spring.cloud.gateway.routes[1].uri=http://localhost:8082
spring.cloud.gateway.routes[1].uri=lb://BOOK
spring.cloud.gateway.routes[1].predicates[0]=Path=/books/**
spring.cloud.gateway.routes[1].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[1].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[1].args.name=bookServiceCircuitBreaker
spring.cloud.gateway.routes[1].filters[1].args.fallbackuri=forward:/bookFallBack



spring.cloud.gateway.routes[2].id=cart
#spring.cloud.gateway.routes[2].uri=http://localhost:8083
spring.cloud.gateway.routes[2].uri=lb://CART
spring.cloud.gateway.routes[2].predicates[0]=Path=/Cart/**
spring.cloud.gateway.routes[2].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[2].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[2].filters[1].args.name=cartServiceCircuitBreaker
spring.cloud.gateway.routes[2].filters[1].args.fallbackuri=forward:/cartFallBack


spring.cloud.gateway.routes[3].id=order
#spring.cloud.gateway.routes[3].uri=http://localhost:8086
spring.cloud.gateway.routes[3].uri=lb://ORDER
spring.cloud.gateway.routes[3].predicates[0]=Path=/Order/**
spring.cloud.gateway.routes[3].filters[0]=AuthenticationFilter
spring.cloud.gateway.routes[3].filters[1].name=CircuitBreaker
spring.cloud.gateway.routes[3].filters[1].args.name=orderServiceCircuitBreaker
spring.cloud.gateway.routes[3].filters[1].args.fallbackuri=forward:/orderFallBack
spring.cloud.gateway.routes[3].filters[1].args.statusCodes=SERVICE_UNAVAILABLE,INTERNAL_SERVER_ERROR






# Logging Configuration
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=DEBUG
logging.level.org.springframework.cloud.gateway.support.WeightCalculatorFilter=WARN
logging.level.org.springframework.cloud.gateway.filter.factory.CircuitBreaker=DEBUG



management.endpoints.web.exposure.include=health,info,circuitbreaker
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.sliding-window-type=count_based

resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.sliding-window-type=count_based

resilience4j.timelimiter.instances.bookServiceCircuitBreaker.timeoutDuration=5000ms
resilience4j.timelimiter.instances.userServiceCircuitBreaker.timeoutDuration=5000ms
resilience4j.timelimiter.instances.cartServiceCircuitBreaker.timeoutDuration=5000ms
resilience4j.timelimiter.instances.orderServiceCircuitBreaker.timeoutDuration=3000ms

resilience4j.retry.instances.orderServiceCircuitBreaker.max-attempts=3
resilience4j.retry.instances.orderServiceCircuitBreaker.wait-duration=2s


# Retry Configuration
resilience4j.retry.instances.bookServiceCircuitBreaker.max-attempts=3
resilience4j.retry.instances.bookServiceCircuitBreaker.wait-duration=2s

# Rate Limiter Configuration (if required)
#resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.time-out=0
resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.limit-refresh-period=2s
resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.limit-for-period=2

# Discovery Configuration
spring.cloud.discovery.enabled=true
spring.cloud.loadbalancer.enabled=true
